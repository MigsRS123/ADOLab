using System.Data;
using Oracle.ManagedDataAccess.Client;

public class AlunoRepository : IRepository<Aluno>
{
    public string ConnectionString { get; set; }

    public AlunoRepository(string connectionString)
    {
        ConnectionString = connectionString ?? throw new ArgumentNullException(nameof(connectionString));
    }

    public void GarantirEsquema()
    {
        const string ddl = @"
            BEGIN
                EXECUTE IMMEDIATE '
                    CREATE TABLE alunos (
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        nome VARCHAR2(100),
                        idade NUMBER,
                        email VARCHAR2(100),
                        data_nascimento DATE
                    )
                ';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN RAISE; END IF; -- ignora tabela existente
            END;
        ";

        using var conn = new OracleConnection(ConnectionString);
        conn.Open();
        using var cmd = new OracleCommand(ddl, conn) { CommandType = CommandType.Text };
        cmd.ExecuteNonQuery();
    }

    public int Inserir(string nome, int idade, string email, DateTime dataNascimento)
    {
        const string sql = @"
        INSERT INTO alunos (nome, idade, email, data_nascimento)
        VALUES (:nome, :idade, :email, :data_nascimento)
        RETURNING id INTO :id
    ";

        using var conn = new OracleConnection(ConnectionString);
        conn.Open();
        using var cmd = new OracleCommand(sql, conn);

        cmd.Parameters.Add(new OracleParameter("nome", OracleDbType.Varchar2, nome, ParameterDirection.Input));
        cmd.Parameters.Add(new OracleParameter("idade", OracleDbType.Int32, idade, ParameterDirection.Input));
        cmd.Parameters.Add(new OracleParameter("email", OracleDbType.Varchar2, email, ParameterDirection.Input));
        cmd.Parameters.Add(new OracleParameter("data_nascimento", OracleDbType.Date, dataNascimento, ParameterDirection.Input));

        var idParam = new OracleParameter("id", OracleDbType.Decimal) { Direction = ParameterDirection.Output };
        cmd.Parameters.Add(idParam);

        cmd.ExecuteNonQuery();

        if (idParam.Value is Oracle.ManagedDataAccess.Types.OracleDecimal oracleDecimal)
        {
            return oracleDecimal.ToInt32();
        }

        return 0;
    }


    public List<Aluno> Listar()
    {
        const string sql = "SELECT id, nome, idade, email, data_nascimento FROM alunos ORDER BY id";
        var lista = new List<Aluno>();

        using var conn = new OracleConnection(ConnectionString);
        conn.Open();
        using var cmd = new OracleCommand(sql, conn);
        using var reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            lista.Add(new Aluno
            {
                Id = reader.GetInt32(0),
                Nome = reader.IsDBNull(1) ? string.Empty : reader.GetString(1),
                Idade = reader.IsDBNull(2) ? 0 : Convert.ToInt32(reader.GetValue(2)),
                Email = reader.IsDBNull(3) ? string.Empty : reader.GetString(3),
                DataNascimento = reader.IsDBNull(4) ? DateTime.MinValue : reader.GetDateTime(4)
            });
        }
        return lista;
    }

    public int Atualizar(int id, string nome, int idade, string email, DateTime dataNascimento)
    {
        const string sql = @"
            UPDATE alunos
            SET nome = :nome, idade = :idade, email = :email, data_nascimento = :data_nascimento
            WHERE id = :id
        ";

        using var conn = new OracleConnection(ConnectionString);
        conn.Open();
        using var cmd = new OracleCommand(sql, conn);
        cmd.Parameters.Add(new OracleParameter("nome", nome));
        cmd.Parameters.Add(new OracleParameter("idade", idade));
        cmd.Parameters.Add(new OracleParameter("email", email));
        cmd.Parameters.Add(new OracleParameter("data_nascimento", dataNascimento));
        cmd.Parameters.Add(new OracleParameter("id", id));

        return cmd.ExecuteNonQuery();
    }

    public int Excluir(int id)
    {
        const string sql = "DELETE FROM alunos WHERE id = :id";
        using var conn = new OracleConnection(ConnectionString);
        conn.Open();
        using var cmd = new OracleCommand(sql, conn);
        cmd.Parameters.Add(new OracleParameter("id", id));
        return cmd.ExecuteNonQuery();
    }

    public List<Aluno> Buscar(string propriedade, object valor)
    {
        var colunasValidas = new[] { "id", "nome", "idade", "email", "data_nascimento" };
        if (!colunasValidas.Contains(propriedade.ToLower()))
            throw new ArgumentException($"Propriedade inválida: {propriedade}");

        // Para colunas numéricas (id, idade) faremos comparação exata; para texto usamos LIKE
        bool isNumericCol = propriedade.Equals("id", StringComparison.OrdinalIgnoreCase) ||
                            propriedade.Equals("idade", StringComparison.OrdinalIgnoreCase);

        string sql;
        if (isNumericCol)
        {
            sql = $"SELECT id, nome, idade, email, data_nascimento FROM alunos WHERE {propriedade} = :valor";
        }
        else
        {
            sql = $"SELECT id, nome, idade, email, data_nascimento FROM alunos WHERE LOWER({propriedade}) LIKE :valor";
        }

        var lista = new List<Aluno>();
        using var conn = new OracleConnection(ConnectionString);
        conn.Open();
        using var cmd = new OracleCommand(sql, conn);

        if (isNumericCol)
        {
            cmd.Parameters.Add(new OracleParameter("valor", Convert.ToInt32(valor)));
        }
        else
        {
            cmd.Parameters.Add(new OracleParameter("valor", $"%{valor.ToString().ToLower()}%"));
        }

        using var reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            lista.Add(new Aluno
            {
                Id = reader.GetInt32(0),
                Nome = reader.IsDBNull(1) ? string.Empty : reader.GetString(1),
                Idade = reader.IsDBNull(2) ? 0 : Convert.ToInt32(reader.GetValue(2)),
                Email = reader.IsDBNull(3) ? string.Empty : reader.GetString(3),
                DataNascimento = reader.IsDBNull(4) ? DateTime.MinValue : reader.GetDateTime(4)
            });
        }
        return lista;
    }
}

